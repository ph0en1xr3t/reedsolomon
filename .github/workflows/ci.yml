name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, macos-latest]
        compiler: 
          - { name: "GCC", cc: "gcc", cxx: "g++" }
          - { name: "Clang", cc: "clang", cxx: "clang++" }
        build_type: [Release, Debug]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: macos-latest
            build_type: Debug
          - os: ubuntu-20.04
            compiler: { name: "Clang", cc: "clang", cxx: "clang++" }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake make build-essential
        if [[ "${{ matrix.compiler.name }}" == "Clang" ]]; then
          sudo apt-get install -y clang clang-tools
        fi

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake
        if [[ "${{ matrix.compiler.name }}" == "Clang" ]]; then
          brew install llvm
        fi

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }} --parallel

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{ matrix.build_type }} --output-on-failure

    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.compiler.name }}-${{ matrix.build_type }}
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang clang-tidy clang-format cppcheck

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build for analysis
      run: cmake --build build --parallel

    - name: Run clang-tidy
      run: |
        if [ -f build/compile_commands.json ]; then
          find src include -name "*.cc" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
          xargs clang-tidy -p build --config-file=.clangd --warnings-as-errors='*'
        fi

    - name: Check code formatting
      run: |
        find src include examples tests -name "*.cc" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
        xargs clang-format --dry-run --Werror --style=file

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --std=c++20 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=unusedFunction \
          --error-exitcode=1 \
          src/ include/ examples/ tests/

  sanitizers:
    name: Memory Sanitizers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, thread, undefined]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang

    - name: Configure CMake with sanitizer
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
          -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build build --parallel

    - name: Test with sanitizer
      working-directory: build
      run: ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
        TSAN_OPTIONS: abort_on_error=1
        UBSAN_OPTIONS: abort_on_error=1

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake gcc g++ lcov

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build build --parallel

    - name: Test
      working-directory: build
      run: ctest --output-on-failure

    - name: Generate coverage report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/test/*' '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false